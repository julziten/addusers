{"version":3,"sources":["components/AddUserForm.js","App.js","serviceWorker.js","index.js"],"names":["AddUserForm","handleInput","e","target","value","name","setState","handleSubmit","preventDefault","console","log","props","onAddUser","state","alert","className","onSubmit","this","type","placeholder","onChange","Component","App","handleAddUser","user","users","index","window","confirm","filter","i","map","lastname","email","age","onClick","removeUser","bind","length","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"ySAwCeA,E,YArCX,aAAc,IAAD,8BACT,+CASJC,YAAc,SAACC,GAAO,IAAD,EACOA,EAAEC,OAAlBC,EADS,EACTA,MAAOC,EADE,EACFA,KACf,EAAKC,SAAL,eACKD,EAAOD,KAbH,EAiBbG,aAAe,SAACL,GACZA,EAAEM,iBACFC,QAAQC,IAAI,qBACZ,EAAKC,MAAMC,UAAU,EAAKC,OAC1BC,MAAM,eAnBN,EAAKD,MAAQ,CACT,KAAQ,GACR,SAAY,GACZ,MAAS,GACT,IAAO,IANF,E,sEAyBT,OACI,0BAAME,UAAU,WAAWC,SAAUC,KAAKV,cACtC,2BAAOW,KAAK,OAAOb,KAAK,OAAOc,YAAY,OAAOC,SAAUH,KAAKhB,cACjE,2BAAOiB,KAAK,OAAOb,KAAK,WAAWc,YAAY,WAAWC,SAAUH,KAAKhB,cACzE,2BAAOiB,KAAK,QAAQb,KAAK,QAAQc,YAAY,SAASC,SAAUH,KAAKhB,cACrE,2BAAOiB,KAAK,SAASb,KAAK,MAAMc,YAAY,OAAOC,SAAUH,KAAKhB,cAClE,4BAAQiB,KAAK,UAAb,iB,GAhCUG,aCyDXC,E,YArDb,aAAc,IAAD,8BACX,+CAMFC,cAAgB,SAACC,GACf,EAAKlB,SAAS,CACZmB,MAAM,GAAD,mBAAM,EAAKZ,MAAMY,OAAjB,CAAwBD,OAP/B,EAAKX,MAAQ,CACXY,WAHS,E,wEAaFC,GACLC,OAAOC,QAAQ,+CACjBX,KAAKX,SAAS,CACZmB,MAAOR,KAAKJ,MAAMY,MAAMI,QAAO,SAAC3B,EAAG4B,GACjC,OAAOA,IAAMJ,S,+BAOZ,IAAD,OACAD,EAAQR,KAAKJ,MAAMY,MAAMM,KAAI,SAACP,EAAMM,GACxC,OACE,yBAAKf,UAAU,OACb,6BACE,4BAAKS,EAAKnB,KAAV,IAAiBmB,EAAKQ,UACtB,qCAAWR,EAAKS,OAChB,mCAAST,EAAKU,MAEhB,4BAAQnB,UAAU,gBAAgBoB,QAAS,EAAKC,WAAWC,KAAK,EAAMP,IAAtE,cAIN,OACE,yBAAKf,UAAU,iBACb,uCACUE,KAAKJ,MAAMY,MAAMa,OACzB,8DAEF,kBAAC,EAAD,CAAa1B,UAAWK,KAAKM,gBAC7B,yBAAKR,UAAU,aACZU,Q,GA9COJ,aCOEkB,QACW,cAA7BZ,OAAOa,SAASC,UAEe,UAA7Bd,OAAOa,SAASC,UAEhBd,OAAOa,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,a","file":"static/js/main.6ee84474.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass AddUserForm extends Component {\n    constructor(){\n        super();\n        this.state = {\n            'name': '',\n            'lastname': '',\n            'email': '',\n            'age': ''\n        }\n    }\n\n    handleInput = (e) => {\n        const { value, name } = e.target;\n        this.setState({\n            [name]: value,\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        console.log('submiting form...');\n        this.props.onAddUser(this.state);\n        alert('Sending...');\n    }\n\n    render() {\n        return(\n            <form className=\"add-form\" onSubmit={this.handleSubmit}>\n                <input type=\"text\" name=\"name\" placeholder=\"Name\" onChange={this.handleInput}/>\n                <input type=\"text\" name=\"lastname\" placeholder=\"Apellido\" onChange={this.handleInput}/>\n                <input type=\"email\" name=\"email\" placeholder=\"E-mail\" onChange={this.handleInput}/>\n                <input type=\"number\" name=\"age\" placeholder=\"Edad\" onChange={this.handleInput}/>\n                <button type=\"submit\">Add User</button>\n            </form>\n        )\n    }\n}\n\nexport default AddUserForm;","import React, { Component } from 'react';\nimport './App.css';\nimport { users } from './users.json';\nimport AddUserForm  from './components/AddUserForm';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      users\n    };\n  }\n\n  handleAddUser = (user) => {\n    this.setState({\n      users: [...this.state.users, user]\n    })\n  }\n\n  removeUser(index) {\n    if (window.confirm('Are you sure tou want to delete this user?')) {\n      this.setState({\n        users: this.state.users.filter((e, i) => {\n          return i !== index;\n        })\n      })\n    }\n  }\n\n\n  render(){\n    const users = this.state.users.map((user, i) => {\n      return (\n        <div className=\"box\">\n          <div>\n            <h1>{user.name} {user.lastname}</h1>\n            <p>Email: {user.email}</p>\n            <p>Age: {user.age}</p>\n          </div>\n          <button className=\"delete-button\" onClick={this.removeUser.bind(this, i)}>Delete</button>\n        </div>\n      )\n    })\n    return (\n      <div className=\"big-container\">\n        <nav>\n          Users: {this.state.users.length}\n          <h1> Add new user to the platform</h1>\n        </nav>\n        <AddUserForm onAddUser={this.handleAddUser}/>\n        <div className=\"container\">\n          {users}\n        </div>\n      </div>\n\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}